//2 Pointer Approach for UNION sorted ARRAYS.
#include<bits/stdc++.h>
vector < int > sortedArray(vector < int > a, vector < int > b) {
    int n1 = a.size();
    int n2 = b.size();
    int i = 0;
    int j = 0;
    vector <int> unionArr;
    while(i<n1 && j < n2) {
        if(a[i] <= b[j]) {
            if(unionArr.size() == 0 ||
                unionArr.back() != a[i]) {
                    unionArr.push_back(a[i]);
            }
            i++;
        }
        else{
          if (unionArr.size() == 0 || 
                unionArr.back() != b[j]) {
                    unionArr.push_back(b[j]);
          }
          j++;
        }
    }
    while(j<n2){
        if (unionArr.size() == 0 || 
                unionArr.back() != b[j]) {
                    unionArr.push_back(b[j]);
          }
          j++;
    }

    while(i<n1){
        if(unionArr.size() == 0 ||
                unionArr.back() != a[i]) {
                    unionArr.push_back(a[i]);
            }
            i++;

    }

    return unionArr;

}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//2 pointer approach for Intersection of two sorted arrays
#include <bits/stdc++.h> 
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
{
	int i = 0;
	int j = 0;
	vector<int> ans;
	while(i<n && j<m){
		if(arr1[i] < arr2[j]) {
			i++;
		}
		else if(arr2[j] < arr1[i]) {
			j++;
		}
		else{
			ans.push_back(arr1[i]);
			i++;
			j++;
		}
	}
	return ans;
}
